/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* setting property with universal selector to prevent default begaviour for browsers */
*{
    margin: 0;
    padding:0;
    box-sizing: border-box;
}

/* html is the root of html page and rem units work by taking root reference to calculate values
so we can set some defalut value like 10 (using 10 will make easy to calculate rem like now 1rem = 10 px) */
html{
    /* we dont want to set fix pixels becuase in this case user will loose the flexibility to resize the */
    /* font-size: 10px; */

    font-size: 62.5%;  /* 16px = 100%   => 10 px = (10/16)*100 %   => 10px = 62.5% */
}

/* setting properties on body so that they will be inherited by children elements */
body{
    font-family: "Leto", sans-serif;
    font-weight: 400;
    color: #777;
    font-size: 16px;
    line-height: 1.7;
    /* padding: 30px;   to give a white border, padding does not inherit */
    /* converting padding pixel to rem */
    padding: 3rem;
}

.header{
    height: 95vh;

    /* we put linear-gradient in the background-image */
    /* different varients of background-image
    background-image: linear-gradient(#7ed56f, #28b485), url(../img/hero.jpg);

    background-image: linear-gradient(to right, #7ed56f, #28b485), url(../img/hero.jpg);

    background-image: linear-gradient(to right bottom, #7ed56f, #28b485), url(../img/hero.jpg);

    for color change: we can hover on #7ed56f then can change the opacity, or can directly give opacity
      in the last two digit of color like : #7ed56f => #7ed56f80 (here 80 = .8 opacity)
    */
    background-image: linear-gradient(to right bottom, #7ed56f80, #28b48580), url(../img/hero.jpg);
    

    background-size: cover; /*  it will try to fit the img to the container element(header) */
    background-position: center; /* it will ensure that no matter what is the device size but img will be at top */
    /* you can test what background-position dees by simple resizing the browser */
    /*
        background-position: bottom;  //now bottom of image will be remain same while resizing   
        background-position: center;  //now bottom of image will be remain same while resizing
    */

    /* making the header polygon */
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);   /* give condinates -> start from left top then give clockwise */

    position: relative;  /* to give the from refrence to the child element -> logo-box */
}

.logo-box{
    position: absolute;
    top: 4rem;
    left: 4rem;
}

.logo{
    height: 3.5rem;
}

.text-box{
    /* centering the box */
    position: absolute;
    top: 40%;   /* here 50% is refering to the parent element width and height */
    left: 50%;  /* here 50% is refering to the parent element width and height */

    /* but we also need to translate the element itself to perfectly center it */
    transform: translate(-50%, -50%);   /* here 50% is refring to element itself */

    /* for button to center */
    text-align: center;
}

.heading-primary{
    color: #fff;
    text-transform: uppercase;

     /* This is used to hide back side of element and also use to prevent some unwanted animation behaviour*/
    backface-visibility: hidden;   

    /* give margin to make space between heading and button */
    margin-bottom: 6rem;
}

.heading-primary-main{
    display: block; /* span is by default inline element like text, so to send the next sentence to next line make it block */
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3rem;
    
    /* apply animation */
    /* animation: name duration timing-function delay iteration-count direction fill-mode; */
    animation-name: moveInLeft;
    animation-duration: 2s; /* animation will take 3s to complete */

    

    /* 
    animation-delay: 3s;    //after 3s animation will start
    animation-iteration-count: 3;   //animation will occur 3 times 
    animation-timing-function: ease-in; //animation will start slow then will be faster with time 
    */
}

.heading-primary-sub{
    display: block;
    font-size: 2rem;
    font-weight: 400;
    letter-spacing: 1.5rem;
    animation-name: moveInRight;
    animation-duration: 2s;
}

/* animation */
@keyframes moveInLeft {
    0%{
        opacity: 0;
        transform: translate(-10rem);
    }
    80%{
        transform: translate(1rem);
    }
    100%{
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInRight {
    0%{
        opacity: 0;
        transform: translate(100px);    /* 100px is respective to initial state */
    }
    80%{
        transform: translate(-10px);    /* -10px is respective to initial state */
    }
    100%{
        opacity: 1;
        transform: translate(0);    /* 0 is respective to initial state */
    }
}

.btn:link, .btn:visited{
    text-transform: uppercase;
    text-decoration: none;
    padding:1rem 2rem;

    /* 
    by default it is inline, so to give it padding(by default if we give padding then it will hide other elements
    if it overlaps) we need to make it as inline-block element, so that padding can work properly.
    */
    display: inline-block;

    /* 
    as it is like inline element so we can treat it as text. so to place it at center we need to use 
    text-align : center in the parent element. 
    */

    border-radius: 20rem;

    /* transition should always be define on initial state */
    /* this is second way to add animation(first is using @keyframes) */
    transition: all 0.2s;

    position: relative;

    font-size: 1.6rem;
}

.btn-white{
    background-color: #fff;
    color: #777;
}

.btn:hover{
    transform: translateY(-3px);   /* -3px is respective to initial state */

    /* box-shadow: x_offset y_offset blur_effect color*/
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);

}

/* it represent when button will be clicked */
.btn:active{
    transform: translateY(-0.1rem);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2);
}

/*  */
.btn::after{
    content: "";
    display: inline-block;
    width: 100%;
    height: 100%;
    border-radius: 20rem;
    position: absolute; /* we need to take btn as its relative position */
    top:0;
    left: 0;
    z-index: -1;
    transition: all 0.4s;
}

.btn-white::after{
    background-color: #fff;
}

.btn:hover::after{
    transform: scaleX(1.4) scaleY(1.6);
    opacity: 0;
}

.btn-animation{
    animation: moveInButton 2s ease-out 0.75s;
    /* when we use animation-delay then all properties have some value it means we set opacity = 0 at 0% animation
    but it not not behaive like opacity = 0, instead it will shoh the button, so to remove this behaviour we will
    use property animation-fill-mode, it will set all properties to 0 or default */
    animation-fill-mode: backwards;
}

@keyframes moveInButton {
    0%{
        opacity: 0;
        transform: translateY(2rem);    /* 100px is respective to initial state */
    }
    100%{
        opacity: 1;
        transform: translateY(0);    /* 0 is respective to initial state */
    }
}